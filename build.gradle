//build.gradle

  repositories {
      maven { url "http://repo.maven.apache.org/maven2" }
    }

    configurations {
      antClasspath
    }

    // dependency for XMLResultAggregator task

    dependencies {
      antClasspath 'org.apache.ant:ant-junit:1.8.2'
    }

// Select appropriate overrride properties file based on target deployment environment

switch (iibEnv) {

         case "PROD":
          ant.properties['iib.override.file'] = 'override-prod.properties'
          break;
         case "QA":
          ant.properties['iib.override.file'] = 'override-qa.properties'
          break;
         default:
         ant.properties['iib.override.file'] = 'override.properties'
}

  // Define parameters for use by runSoapUI task

  String soapuiExec, soapuiParameters

  // Set Ant properties based on underlying platform

  /*
		<property name="mqsi.createbar.parameters" value="-data ${basedir} -b ${iib.barfile.param} ${iib.mqsicreatebar.params} -cleanBuild" />
  */

if (org.gradle.internal.os.OperatingSystem.current().windows) {

        ant.properties['mqsi.deployw'] = 'mqsideployw.bat'
        ant.properties['mqsi.deployw.param'] = '/C'
        ant.properties['mqsi.createbar'] = 'mqsicreatebar.exe'
        ant.properties['iib.path'] = mqsiprofilePathWin
        ant.properties['cmd.exec'] = 'cmd.exe'

        soapuiExec = soapUIPathWin + '\\testrunner.bat'

      } else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {

        ant.properties['mqsi.deployw'] = 'mqsideployw'
        ant.properties['mqsi.deployw.param'] = ''
        ant.properties['mqsi.createbar'] = 'mqsicreatebar'
        ant.properties['iib.path'] = mqsiprofilePathMacOS
        ant.properties['cmd.exec'] = projectDir.getPath() + '/mqsideployw'

        soapuiExec = soapUIPathMacOS + '/testrunner.sh'

      } else {

        ant.properties['mqsi.deployw'] = 'mqsideployw'
        ant.properties['mqsi.deployw.param'] = ''
        ant.properties['mqsi.createbar'] = 'mqsicreatebar'
        ant.properties['iib.path'] = mqsiprofilePathUnix
        ant.properties['cmd.exec'] = projectDir.getPath() + '/mqsideployw'

        soapuiExec = soapUIPathUnix + '/testrunner.sh'
}

  //ant.properties['iib.barfile.dir'] = barfileDir
  //ant.properties['iib.bar.version'] = barFileVersion
  //ant.properties['iib.bar'] = appName
  //ant.properties['iib.mqsicreatebar.params'] = paramsMQSICreateBarfile

  ant.importBuild 'build.xml'

  task runSoapUI {

    doLast {

      if (soapUIProject != 'None') {

        soapuiParameters = soapUIParams + ' ' + soapUIProject

        ant.mruntest(soapuiexec: soapuiExec, params: soapuiParameters)
        //soapuiXmlToHtml(projectDir)

      } else {
        ant.echo('Nothing to do.')
      }
    }
  }
  /*
   * How do we solve the up-to-date problem in gradle?
   */
  task multiBuild() {

    //First, extract configurations from config file
    def config = new ConfigSlurper().parse(new File("$projectDir/build.config").toURL())
    ant.echo("Build configuration file loaded ...")

    doLast {

      config.each { k,v  -> println("${k}: ${v.applications}")

      def host, port, broker, execgroup, oFile
      def barfile = "$projectDir/BARfiles/${v.barname}-${v.version}.bar"
      def cbParams = "-data $projectDir -b $barfile -cleanBuild -a "
      def orParams = "-b $barfile -r -p "

        //Mandatory. There must at least be one application

        v.applications.each { app -> cbParams += "$app "}

        if (!v.libraries.isEmpty()) {

          cbParams += " -l "
          v.libraries.each {lib -> cbParams += "$lib "}
        }
        if (!v.projects.isEmpty()) {

          cbParams += " -p "
          v.projects.each { proj -> cbParams += "$proj "}
        }
        if (v.deployAsSource == 'true') { cbParams += " -deployAsSource "}

        //ant.mcompile(createbarParams: cbParams)

        v.overrideFiles.each {key, value -> if (v.environment == key) {
          oFile = value}
        }
        orParams += oFile
        ant.moverride(applyOverrideParams: orParams)

        v.integrationNodes.each {name, value ->

        println("${value.host}, ${value.port}, ${value.intNode}, ${value.intServer}, ${barfile}")

          /*ant.mdeploy(inode: value.intNode,
                      hostname: value.host,
                      port: value.port,
                      execgroup: value.intServer,
                      barfile: barfile)*/
        }
      }
    }
  }

  task multiDeploy() {

    File inFile = file('broker.properties')
    Properties brokers = readPropsFile(inFile)

      doLast {

        String[] brokerElems
        def iNode, hostName, Port, iServer

        brokers.each { key, value ->

          brokerElems = value.split(':')

          // Not very elegant, but here goes ...
          iNode = brokerElems[0]
          hostName = brokerElems[1]
          Port = brokerElems[2]
          iServer = brokerElems[3]

          ant.mdeploy(inode: iNode,
                  hostname: hostName,
                  port: Port,
                  execgroup: iServer)
                }
              }
            }

//------ Functions used by tasks below this line ------

// function to perform XSLT transformation of soapUI xml test report to html
/*
 * Thanks to ... http://stackoverflow.com/questions/35770615/need-through-guidance-on-gradle-script-to-execute-soapui-project-xmls-and-genera/35774134#35774134
*/

def soapuiXmlToHtml(resultsDir) {

    def targetDir = new File(resultsDir, 'html')

    ant.taskdef(
        name: 'junitreport',
        classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.antClasspath.asPath
    )

    ant.junitreport(todir: resultsDir) {
        fileset(dir: resultsDir, includes: 'TEST-*.xml')
        report(todir: targetDir, format: "noframes")
    }
}

//------

Properties readPropsFile(File fProps) {

 ant.echo('Reading a properties file.')

 if (!fProps.exists()) {
     throw new GradleException(
     "Required properties file does not exist: $fProps.canonicalPath")
 }
  Properties props = new Properties()
  fProps.withInputStream { stream -> props.load(stream) }
  return props
}

tasks.multiDeploy {

  description "Invokes the mdeploy Ant macro to prepare the MQSI environment and deploy the compiled BAR file to one or more IIB integration nodes."
}

tasks.runSoapUI {

  description "Runs a SoapUI Test Project and generates a junit-style test report."
}

//multiDeploy.dependsOn('compile', 'override')
runSoapUI.dependsOn('multiDeploy')
